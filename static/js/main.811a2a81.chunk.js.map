{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","bets","setBets","useEffect","a","fetch","method","headers","body","JSON","stringify","userId","res","json","data","getBets","className","map","x","moment","utc","kickoff","format","home","team","result","away","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","uiConfig","signInFlow","signInSuccessUrl","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","SignInScreen","isSignedIn","setIsSignedIn","unregisterAuthObserver","onAuthStateChanged","user","firebaseAuth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQA8DeA,MA1Df,WAAgB,IAAD,EACWC,IAAMC,SAAS,MAD1B,mBACNC,EADM,KACAC,EADA,KAuBb,OApBAH,IAAMI,WAAU,WAAM,4CACpB,8BAAAC,EAAA,sEACoBC,MAChB,uEACA,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,OAAQ,8DAThB,cACQC,EADR,gBAaqBA,EAAIC,OAbzB,OAaQC,EAbR,OAcEZ,EAAQY,EAAKb,MAdf,4CADoB,uBAAC,WAAD,wBAiBpBc,KACC,IAGD,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,wCAEF,qBAAKA,UAAW,gBAAhB,SACIf,EAGA,kCACE,kCACE,yCACA,sCACA,uBACA,uBACA,yCAEF,gCACGA,EAAKgB,KAAI,SAACC,GAAD,OACR,+BACE,6BAAKC,IAAOC,IAAIF,EAAEG,SAASC,OAAO,sBAClC,6BAAKJ,EAAEK,KAAKC,OACZ,oBAAIR,UAAU,mBAAd,SAAkCE,EAAEK,KAAKE,SACzC,oBAAIT,UAAU,mBAAd,SAAkCE,EAAEQ,KAAKD,SACzC,6BAAKP,EAAEQ,KAAKF,kBAjBpB,+CCtBKG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gCCadQ,IAASC,cAXc,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAUjB,IAAMC,EAAW,CAEfC,WAAY,QAEZC,iBAAkB,YAElBC,cAAe,CAACZ,IAASa,KAAKC,kBAAkBC,cAelD,SAASC,IAAgB,IAAD,EACcrD,IAAMC,UAAS,GAD7B,mBACfqD,EADe,KACHC,EADG,KAatB,OATAvD,IAAMI,WAAU,WACd,IAAMoD,EAAyBnB,IAC5Ba,OACAO,oBAAmB,SAACC,GACnBH,IAAgBG,MAEpB,OAAO,kBAAMF,OACZ,IAEEF,EAYE,cAAC,EAAD,IAVH,gCACE,wCACA,gDACA,cAAC,IAAD,CACER,SAAUA,EACVa,aAActB,IAASa,YAhCjCU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACT,EAAD,MAEFU,SAASC,eAAe,SAM1BpC,M","file":"static/js/main.811a2a81.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from \"react\";\nimport moment from \"moment\";\n\nfunction App() {\n  const [bets, setBets] = React.useState(null);\n\n  React.useEffect(() => {\n    async function getBets() {\n      const res = await fetch(\n        \"https://actions.d-e102.com/hook/1ecbea10-f9b6-4590-99c8-03f7fdfba55b\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            userId: \"dXNlci1jYWJhNTZlYi1iYmE3LTRkY2UtYmM5Mi1lOTAzZmUzYzIxZjk\",\n          }),\n        }\n      );\n      const data = await res.json();\n      setBets(data.bets);\n    }\n    getBets();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>Bets</h3>\n      </header>\n      <div className={\"Bet-container\"}>\n        {!bets ? (\n          <h3>Loading</h3>\n        ) : (\n          <table>\n            <thead>\n              <th>Kickoff</th>\n              <th>Home</th>\n              <th></th>\n              <th></th>\n              <th>Away</th>\n            </thead>\n            <tbody>\n              {bets.map((x) => (\n                <tr>\n                  <td>{moment.utc(x.kickoff).format(\"YYYY-MM-DD HH:mm\")}</td>\n                  <td>{x.home.team}</td>\n                  <td className=\"Bet-table-result\">{x.home.result}</td>\n                  <td className=\"Bet-table-result\">{x.away.result}</td>\n                  <td>{x.away.team}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBAJqLiR_0up73A5ewidTHHg8k8nU1s1BI\",\n  authDomain: \"skanskaspel-7f6dd.firebaseapp.com\",\n  projectId: \"skanskaspel-7f6dd\",\n  storageBucket: \"skanskaspel-7f6dd.appspot.com\",\n  messagingSenderId: \"903124138548\",\n  appId: \"1:903124138548:web:334599b1d92305a86ae861\",\n  measurementId: \"G-8QL506EK08\",\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n// const auth = firebase.auth();\n\n// auth.useEmulator(\"http://localhost:9099\");\n\n// Configure FirebaseUI.\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: \"/signedIn\",\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [firebase.auth.EmailAuthProvider.PROVIDER_ID],\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <SignInScreen />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nfunction SignInScreen() {\n  const [isSignedIn, setIsSignedIn] = React.useState(false); // Local signed-in state.\n\n  // Listen to the Firebase Auth state and set the local state.\n  React.useEffect(() => {\n    const unregisterAuthObserver = firebase\n      .auth()\n      .onAuthStateChanged((user) => {\n        setIsSignedIn(!!user);\n      });\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\n  }, []);\n\n  if (!isSignedIn) {\n    return (\n      <div>\n        <h1>My App</h1>\n        <p>Please sign-in:</p>\n        <StyledFirebaseAuth\n          uiConfig={uiConfig}\n          firebaseAuth={firebase.auth()}\n        />\n      </div>\n    );\n  }\n  return <App />;\n}\n"],"sourceRoot":""}